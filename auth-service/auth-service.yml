server:
  port: 8081

spring:
  datasource:
    url: ${AUTH_DB_URL}
    username: ${AUTH_DB_USERNAME}
    password: ${AUTH_DB_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 2
      idle-timeout: 30000
      max-lifetime: 1800000
      connection-timeout: 30000
      initialization-fail-timeout: 60000
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
  flyway:
    enabled: true
    locations: classpath:db/migration
    encoding: UTF-8
    validate-on-migrate: true
    baseline-on-migrate: true
    connection-retries: 10
    init-sqls: "SELECT 1"

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka:9092}
    producer:
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka:9092}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      retries: 5
      acks: all
      batch-size: 65536
      delivery-timeout-ms: 30000
      linger-ms: 1000
      request-timeout-ms: 10000
      retry-backoff-ms: 1000
      properties:
        enable.idempotence: true
    consumer:
      bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka:9092}
      group-id: auth-service
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      enable-auto-commit: false
      concurrency: 1
      trusted-packages: org.sleepless_artery.auth_service.*
    topic:
      prefix: auth
      domain: users
      partitions: 1
      replicas: 1
      minInsyncReplicas: 1

  cache:
    type: redis
  data:
    redis:
      host: ${AUTH_REDIS_HOST:redis-auth}
      port: ${AUTH_REDIS_PORT:6379}

jwt:
  secret: ${JWT_SECRET:default-secret-key}
  lifetime: ${JWT_LIFETIME:6h}

admin:
  email-address: ${ADMIN_EMAIL_ADDRESS}
  password: ${ADMIN_PASSWORD}

basic-request-path: auth


grpc:
  server:
    port: 9091
  client:
    GLOBAL:
      negotiation-type: plaintext
      keep-alive-time: 30s
      keep-alive-timeout: 20s
      deadline-after: 10s
    user-service:
      address: ${USER_SERVICE_GRPC_URL:static://user-service:9093}
      
management:
  endpoints:
    web:
      exposure:
        include: health,info
      base-path: /internal/actuator
  endpoint:
    health:
      show-details: always